h0 <- rep(1,n)
h1 <- x
h2 <- x^2
h2[h2 > 25] <- 25
h3 <- x^3
h3[h3 > 125] <-125
h4 <- (x-5)
h4[h4 < 0] <- 0
df2 <- data.frame(y,h0,h1,h2,h3,h4)
fit <- lm(y ~ 0+h0+h1+h2+h3+h4,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*x^2+betaLC[4]*x^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*5^2+betaLC[4]*5^3+betaLC[5]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline', ylim=c(-5,5),xlim=c(4,6))
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*x^2+betaLC[4]*x^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*5^2+betaLC[4]*5^3+betaLC[5]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
df2 <- data.frame(y,h0,h1,h2)
fit <- lm(y ~ 0+h0+h1+h2,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline', ylim=c(-5,5),xlim=c(4,6))
abline(v=5,lty=2,col='red')
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^3
df2 <- data.frame(y,h0,h1,h2)
fit <- lm(y ~ 0+h0+h1+h2,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline', ylim=c(-5,5),xlim=c(4,6))
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x, from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^3
df2 <- data.frame(y,h0,h1,h2)
fit <- lm(y ~ 0+h0+h1+h2,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x, from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2
h3 <- (x-5)^3
df2 <- data.frame(y,h0,h1,h2,h3)
fit <- lm(y ~ 0+h0+h1+h2+h3,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x-5)^2+betaLC[4]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x, from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2
h3 <- (x-5)^3
h4 <- (x-5)
h4[h4 < 0] <- 0
df2 <- data.frame(y,h0,h1,h2,h3,h4)
fit <- lm(y ~ 0+h0+h1+h2+h3+h4,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x-5)^2+betaLC[4]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[5]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2
h3 <- (x-5)^3
h4 <- (x-5)
h4[h4 < 0] <- 0
df2 <- data.frame(y,h0,h1,h2,h3,h4)
fit <- lm(y ~ 0+h0+h1+h2+h3+h4,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x5)^2+betaLC[4]*(x5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[5]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x)^2+betaLC[4]*(x)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x)^2+betaLC[4]*(x)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[5]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
-
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2
h3 <- (x-5)^3
h4 <- (x-5)
h4[h4 < 0] <- 0
df2 <- data.frame(y,h0,h1,h2,h3,h4)
fit <- lm(y ~ 0+h0+h1+h2+h3+h4,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x-5)^2+betaLC[4]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[5]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2
h2[x > 5] <- 0
h3 <- (x-5)^3
h3[x > 5] <- 0
h4 <- (x-5)
h4[h4 < 0] <- 0
df2 <- data.frame(y,h0,h1,h2,h3,h4)
fit <- lm(y ~ 0+h0+h1+h2+h3+h4,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x-5)^2+betaLC[4]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x, from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2
h2[x > 5] <- 0
h3 <- (x-5)^3
h3[x > 5] <- 0
h4 <- (x-5)
h4[h4 < 0] <- 0
df2 <- data.frame(y,h0,h1,h2,h3)
fit <- lm(y ~ 0+h0+h1+h2+h3,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x-5)^2+betaLC[4]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x, from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2
h3 <- (x-5)^3
df2 <- data.frame(y,h0,h1,h2,h3)
fit <- lm(y ~ 0+h0+h1+h2+h3,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x-5)^2+betaLC[4]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x, from = 5, to = max(x), col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x)^2+betaLC[4]*(x)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2
h3 <- (x-5)^3
df2 <- data.frame(y,h0,h1,h2,h3)
fit <- lm(y ~ 0+h0+h1+h2+h3,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x)^2+betaLC[4]*(x)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x, from = 5, to = max(x), col='red',add=T,lwd=2)
-
-
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2
h3 <- (x-5)^3
df2 <- data.frame(y,h0,h1,h2,h3)
fit <- lm(y ~ 0+h0+h1+h2+h3,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x-5)^2+betaLC[4]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x, from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2/5
h3 <- (x-5)^3/5
df2 <- data.frame(y,h0,h1,h2,h3)
fit <- lm(y ~ 0+h0+h1+h2+h3,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x-5)^2+betaLC[4]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x, from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h3 <- (x-5)^3/5
df2 <- data.frame(y,h0,h1,h3)
fit <- lm(y ~ 0+h0+h1+h3,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x, from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h3 <- (x-5)^3
df2 <- data.frame(y,h0,h1,h3)
fit <- lm(y ~ 0+h0+h1+h3,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x, from = 5, to = max(x), col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h3 <- (x-5)^3
h4 <- (x-5)
h4[h4 < 0] <- 0
df2 <- data.frame(y,h0,h1,h3,h4)
fit <- lm(y ~ 0+h0+h1+h3+h4,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[4]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2
h3 <- (x-5)^3
h4 <- (x-5)
h4[h4 < 0] <- 0
df2 <- data.frame(y,h0,h1,h2,h3,h4)
fit <- lm(y ~ 0+h0+h1+h2+h3+h4,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*(x-5)^2+betaLC[4]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[5]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
h0 <- rep(1,n)
h1 <- x
h2 <- (x-5)^2
h3 <- (x-5)^3
h4 <- (x-5)
h4[h4 < 0] <- 0
df2 <- data.frame(y,h0,h1,h2,h3,h4)
fit <- lm(y ~ 0+h0+h1+h2+h3+h4,df2)
betaLC <- coef(fit)
plot(x,y,pch=16,cex=.8,col='gray', main='Linear-Cubic Spline')
abline(v=5,lty=2,col='red')
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*(x-5)^2+betaLC[4]*(x-5)^3, from = min(x), to = 5, col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*(x-5)^2+betaLC[4]*(x-5)^3+betaLC[5]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[3]*(5)^2+betaLC[4]*(5)^3+betaLC[5]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[3]*(5)^2+betaLC[4]*(5)^3+betaLC[5]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
curve(betaLC[1]+betaLC[2]*x+betaLC[5]*(x-5), from = 5, to = max(x), col='red',add=T,lwd=2)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q1.R", echo=TRUE)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q1.R", echo=TRUE)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q1.R", echo=TRUE)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q1.R", echo=TRUE)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 second.R", echo=TRUE)
df = c(dataQ2,pred_y)
dataQ2['yhat'] <- 0
for (i in 1:300){
if (p1x[x1_bin[i],x2_bin[i]] >= 0.5){
dataQ2$yhat[i] = 1
}
}
View(dataQ2)
View(dataQ2)
plot(dataQ2$x1,dataQ2$x2,
pch=ifelse((dataQ2$y == 1),1,4)
)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 second.R", echo=TRUE)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 second.R", echo=TRUE)
misclassified = (dataQ2$y == dataQ2$yhat)
sum(misclassified)
sum(misclassified = !(dataQ2$y == dataQ2$yhat))
print('Amount of misclassified points is: ' + sum(misclassified = !(dataQ2$y == dataQ2$yhat)))
print('Amount of misclassified points is: ',sum(misclassified = !(dataQ2$y == dataQ2$yhat)))
print('Amount of misclassified points is: ',sum(misclassified = !(dataQ2$y == dataQ2$yhat)))
print(paste0('Amount of misclassified points is: ',sum(misclassified = !(dataQ2$y == dataQ2$yhat))))
plot(dataQ2$x1,dataQ2$x2,
pch=ifelse((dataQ2$y == 1),1,4),
col=ifelse((dataQ2$yhat == 1),'red','blue'),
xlabel='x1'
)
plot(dataQ2$x1,dataQ2$x2,
pch=ifelse((dataQ2$y == 1),1,4),
col=ifelse((dataQ2$yhat == 1),'red','blue'),
main='Predictions for (x1,x2)',
xlab='x1'
)
plot(dataQ2$x1,dataQ2$x2,
pch=ifelse((dataQ2$y == 1),1,4),
col=ifelse((dataQ2$yhat == 1),'red','blue'),
main='Predictions for (x1,x2)',
xlab='x1'.
ylab='x2'
)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 second.R", echo=TRUE)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 second.R", echo=TRUE)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 second.R", echo=TRUE)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 second.R", echo=TRUE)
gaussian_density <- function(x){
1/(sqrt(2*pi))*exp(-1/2*(x^2))
}
1/(sqrt(2*pi))*exp(-1/2*(x^2))
gaussian_density(0)
gaussian_density(1.96)
gaussian_density(-1.96)
x.seg <- seq(-2,2,0.1)
sum = 0
for (i in 1:len(x.seg)){
sum = sum + gaussian_density(i)
}
sum = 0
x.seg <- seq(-2,2,0.1)
for (i in 1:length(x.seg)){
sum = sum + gaussian_density(i)
}
sum
gaussian_density <- function(x){
1/(sqrt(2*pi))*exp(-1/2*(x^2))
}
sum = 0
x.seg <- seq(-2,2,0.1)
for (i in 1:length(x.seg)){
sum = sum + gaussian_density(i)
print(sum)
}
sum = 0
x.seg <- seq(-2,2,0.1)
for (i in 1:length(x.seg)){
sum = sum + gaussian_density(x.seg[i])
print(sum)
}
kernel_density_estimator <- function(x, data_x){
n = length(data_x)
kernel = 0
for (i in 1:n){
kernel = kernel + gaussian_density(data_x[i])
}
kernel = kernel / n
}
kernel_density_estimator(-3,x1)
print(kernel_density_estimator(-3,x1))
print(kernel_density_estimator(0,x1))
kernel_density_estimator <- function(x, data_x){
n = length(data_x)
kernel = 0
for (i in 1:n){
kernel = kernel + gaussian_density(x-data_x[i])
}
kernel = kernel / n
}
print(kernel_density_estimator(-10,x1))
print(kernel_density_estimator(-3,x1))
print(kernel_density_estimator(0,x1))
print(kernel_density_estimator(1,x1))
print(kernel_density_estimator(5,x1))
print(kernel_density_estimator(1.1,x1))
print(kernel_density_estimator(5,x1))
kernel_density_estimator <- function(x, data_x){
n = length(data_x)
kernel = 0
for (i in 1:n){
kernel = kernel + gaussian_density(x-data_x[i])
}
kernel = kernel / n
}
gaussian_density <- function(x){
1/(sqrt(2*pi))*exp(-1/2*(x^2))
}
print(kernel_density_estimator(5,x1))
print(kernel_density_estimator(0,x1))
print(kernel_density_estimator(0.1,x1))
print(kernel_density_estimator(0.2,x1))
print(kernel_density_estimator(0.3,x1))
print(kernel_density_estimator(0.5,x1))
print(kernel)
for (i in 1:n){
kernel = kernel + gaussian_density(x-data_x[i])
print(kernel)
}
kernel = kernel / n
kernel_density_estimator <- function(x, data_x){
n = length(data_x)
kernel = 0
for (i in 1:n){
kernel = kernel + gaussian_density(x-data_x[i])
print(kernel)
}
kernel = kernel / n
}
gaussian_density <- function(x){
1/(sqrt(2*pi))*exp(-1/2*(x^2))
}
print(kernel_density_estimator(0.5,x1))
sum(f0x1)
sum(f0x2)
sum(f0x3)
sum(f1x1)
x.seq <- seq(-4,4,0.01)
a = rep(0,length(x.seq))
x.seq <- seq(-4,4,0.01)
a = rep(0,length(x.seq))
for (i in 1:length(x.seq)){
a[i] = kernel_density_estimator(x.seq[i],x1)
}
sum(a)
x.seq <- seq(-4,4,0.005)
a = rep(0,length(x.seq))
for (i in 1:length(x.seq)){
a[i] = kernel_density_estimator(x.seq[i],x1)
}
sum(a)
install.packages(ks)
install.packages('ks)
install.packages('ks)
install.packages('ks')
library(ks)
bandwidthMatrix = matrix(c(0.5,0,0,0.5,nrow=2,ncol=2))
bandwidthMatrix = matrix(c(0.5,0,0,0.5),nrow=2,ncol=2))
bandwidthMatrix = matrix(c(0.5,0,0,0.5),nrow=2,ncol=2)
View(bandwidthMatrix)
View(bandwidthMatrix)
x_dataY1 = dataY1[c('x1',x2)]
x_dataY1 = dataY1[c('x1','x2')]
testf1x1 = kde(x_dataY1,bandwidthMatrix,gridsize = 512)
testf1x1$estimate
A = testf1x1$estimate
x_dataY0 = dataY0[c('x1','x2')]
testf0x = kde(x_dataY0,bandwidthMatrix,gridsize=512)
B = testf0x$estimate
View(B)
View(B)
testf1x = kde(x_dataY1,bandwidthMatrix,gridsize = 512)
A = testf1x1$estimate
A = testf1x$estimate
p1xTest = testf1x*prior1/(testf1x*prior1+testf0x*prior0)
p1xTest = A*prior1/(A*prior1+B*prior0)
p1xTest = A*prior1/(A*prior1+B*prior0)
View(p1xTest)
View(p1xTest)
p1xTest = A*prior1/(A*prior1+B*prior0)
p1xTest[isNan(p1xTest)] = 0
p1xTest[is.nan(p1xTest)] = 0
contour(x1.seg, x2.seg, p1xTest)
x1 = dataQ2$x1
x2 = dataQ2$x2
x1_bin = ceiling((x1 -(-4))/(4-(-4))*512)
x2_bin = ceiling((x2 -(-4))/(4-(-4))*512)
dataQ2['yhat'] <- 0
for (i in 1:300){
if (p1x[x1_bin[i],x2_bin[i]] >= 0.5){
dataQ2$yhat[i] = 1
}
}
plot(dataQ2$x1,dataQ2$x2,
pch=ifelse((dataQ2$y == 1),1,4),
col=ifelse((dataQ2$yhat == 1),'red','blue'),
main='Predictions for (x1,x2)',
xlab='x1',
ylab='x2'
)
x1_bin = ceiling((x1 -(-4))/(4-(-4))*512)
x2_bin = ceiling((x2 -(-4))/(4-(-4))*512)
dataQ2['yhat'] <- 0
for (i in 1:300){
if (p1xTest[x1_bin[i],x2_bin[i]] >= 0.5){
dataQ2$yhat[i] = 1
}
}
plot(dataQ2$x1,dataQ2$x2,
pch=ifelse((dataQ2$y == 1),1,4),
col=ifelse((dataQ2$yhat == 1),'red','blue'),
main='Predictions for (x1,x2)',
xlab='x1',
ylab='x2'
)
print(paste0('Amount of misclassified points is: ',sum(misclassified = !(dataQ2$y == dataQ2$yhat))))
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 secondrecord.R", echo=TRUE)
print(paste0('Amount of misclassified points is: ',sum(misclassified = !(dataQ2$y == dataQ2$yhat))))
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 secondrecord.R", echo=TRUE)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 secondrecord.R", echo=TRUE)
x1.seg = seq(-4, 4, 8/2000)
x2.seg = seq(-4, 4, 8/2000)
x1.seg = seq(-4, 3.999, 8/2000)
x2.seg = seq(-4, 3.999, 8/2000)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 secondrecord.R", echo=TRUE)
d
plot(dataY1$x1,dataY1$x2)
plot(dataY0$x1,dataY0$x2)
p1xTest = B*prior0/(A*prior1+B*prior0)
p1xTest[is.nan(p1xTest)] = 0
contour(x1.seg, x2.seg, p1xTest)
x1 = dataQ2$x1
x2 = dataQ2$x2
x1_bin = ceiling((x1 -(-4))/(4-(-4))*2000)
x2_bin = ceiling((x2 -(-4))/(4-(-4))*2000)
dataQ2['yhat'] <- 0
for (i in 1:300){
if (p1xTest[x1_bin[i],x2_bin[i]] >= 0.5){
dataQ2$yhat[i] = 1
}
}
plot(dataQ2$x1,dataQ2$x2,
pch=ifelse((dataQ2$y == 1),1,4),
col=ifelse((dataQ2$yhat == 1),'red','blue'),
main='Predictions for (x1,x2)',
xlab='x1',
ylab='x2'
)
print(paste0('Amount of misclassified points is: ',sum(misclassified = !(dataQ2$y == dataQ2$yhat))))
x1.seg = seq(x1min, x1max, 0.01)
x2.seg = seq(x2min, x2max, 0.01)
x1 = dataQ2$x1
x2 = dataQ2$x2
x1_bin = ceiling((x1 -(-4))/(4-(-4))*512)
x2_bin = ceiling((x2 -(-4))/(4-(-4))*512)
dataQ2['yhat'] <- 0
for (i in 1:300){
if (p1xTest[x1_bin[i],x2_bin[i]] >= 0.5){
dataQ2$yhat[i] = 1
}
}
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 secondrecord.R", echo=TRUE)
source("C:/Users/Carlos de Cloet/Desktop/Topics in Advanced Statistics/Assignment/RCode/Q2 secondrecord.R", echo=TRUE)
